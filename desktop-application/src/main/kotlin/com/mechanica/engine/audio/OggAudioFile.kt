package com.mechanica.engine.audio

import com.mechanica.engine.memory.useMemoryStack
import com.mechanica.engine.resources.Resource
import org.lwjgl.BufferUtils
import org.lwjgl.openal.AL10
import org.lwjgl.stb.STBVorbis
import org.lwjgl.system.libc.LibCStdlib
import java.nio.ShortBuffer

class OggAudioFile(res: Resource) : AudioFile {
    override val channels: Int
    override val sampleRate: Int
    override val buffer: ShortBuffer
    override val format: Int
        get() = when (channels) {
            1 -> AL10.AL_FORMAT_MONO16
            2 -> AL10.AL_FORMAT_STEREO16
            else -> -1
        }

    init {
        var channels = -1
        var sampleRate = -1
        var ogg: ShortBuffer? = null
        useMemoryStack {
            val channelBuffer = ints(0)
            val sampleRateBuffer = ints(0)
            ogg = STBVorbis.stb_vorbis_decode_memory(res.buffer, channelBuffer, sampleRateBuffer)
            channels = channelBuffer[0]
            sampleRate = sampleRateBuffer[0]
        }

        this.buffer = convertToGCBuffer(ogg) ?: throw IllegalStateException("Unable to load audio file: ${res.path}")

        this.channels = channels
        this.sampleRate = sampleRate
    }

    /**
     * Convert from a ShortBuffer generated by the STBVorbis call to a ShortBuffer that can be garbage collected
     */
    private fun convertToGCBuffer(ogg: ShortBuffer?): ShortBuffer? {
        return if (ogg != null) {
            val buffer = BufferUtils.createShortBuffer(ogg.remaining())
            (buffer.put(ogg) as java.nio.Buffer).position(0)
            freeVorbis(ogg)
            buffer
        } else null
    }

    private fun freeVorbis(buffer: ShortBuffer) {
        (buffer as java.nio.Buffer).position(0)
        LibCStdlib.free(buffer)
    }
}